trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#l은 1부터 da의 숫자까지 주르륵
l=1:nrow(da)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#q는 da의 행의 수/5 (k는 5니까)
q=nrow(da)/k
#l은 1부터 da의 숫자까지 주르륵
l=1:nrow(da)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#q는 da의 행의 수/5 (k는 5니까)
q=nrow(da)/k
#l은 1부터 da의 숫자까지 주르륵
l=1:nrow(da)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
testlist = ((z-1)*q+1):(z*q)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in k:l){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#l은 1부터 da의 숫자까지 주르륵
l=1:nrow(da)
l
l=150
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf', !NA)
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#l은 1부터 da의 숫자까지 주르륵
l=1:nrow(da)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#q는 da의 행의 수/5 (k는 5니까)
q=nrow(da)/k
Q
q
#l은 1부터 da의 숫자까지 주르륵
l=1:nrow(da)
l
#l은 1부터 da의 숫자까지 주르륵
l=table(1:nrow(da))
l
ll=length(l)
ll
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in ll:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in ll:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(ll, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#l은 1부터 da의 숫자까지 주르륵
l=1:nrow(da)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(ll, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in length(l):k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(ll, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#l은 1부터 da의 숫자까지 주르륵
l=length(1:nrow(da))
#l은 1부터 da의 숫자까지 주르륵인데 아니 반복문을 쓰실꺼면 numeric으로 하셔야죠 교수님
l=length(1:nrow(da))
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(ll, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(ll, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
trainlist=setdiff(l, testlist)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[testlist, ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#l은 1부터 da의 숫자까지 주르륵인데 아니 반복문을 쓰실꺼면 numeric으로 하셔야죠 교수님
l=1:nrow(da)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in l:k){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#l은 1부터 da의 숫자까지 주르륵인데 아니 반복문을 쓰실꺼면 numeric으로 하셔야죠 교수님
l=length(1:nrow(da))
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in k:l){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in k:l){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#da는 iris 데이터셋을 무작위 샘플읋 추출한 데이터 행의 수
da=iris[sample(nrow(iris)), ]
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
install.packages("caret")
da=iris[sample(nrow(iris)), ]
#k는 5
k=5
#q는 da의 행의 수/5 (k는 5니까)
q=nrow(da)/k
#l은 1부터 da의 숫자까지 주르륵인데 아니 반복문을 쓰실꺼면 numeric으로 하셔야죠 교수님
l=length(1:nrow(da))
#accuracy 변수를 0으로 선언(accuracy를 따로 선언해주기에 0으로 지정)
acc=0
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in k:l){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
library(caret)
for(z in k:l){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in k:l){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
library(randomForest)
#반복문(whlie도 있는거 rg?, for와 좀 다른 이유는 조건문 부착 가능하징 자매품 repeat도 있단다 자세한건 구글링ㄱㄱ, 대체적으로 c나 python 반복문이이랑 비슷해!)
#예제에선 for를 썼으니까 for를 쓸게(실은 로직짜기 귀찮ㅎ)
#z는 ppt의 i와 같음(걍 임의대로 한거얌)
for(z in k:l){
testlist = ((z-1)*q+1):(z*q)
testdata=data[is.na(testlist), ]
trainlist=setdiff(l, testlist)
f=train(Species~., data=testdata, method='rf')
p=predict(f, newdata=testdata)
t=table(p, testdata$Species)
accuracy=acc+(t[1,1]+t[2,2]+t[3,3]/length(testlist))
}
fir_list
#list객체
#list객체는 유형과 크기가 다른 객체를 저장할 수 있기 때문에 가장 일반젃인 저장소임
fir_list <- list(a=c(1,2,3,4,5),
b=matrix(1:10, nrow = 2, ncol = 5 ),
c=data.frame(price=c(57.4,79.4,11.8)),
stock=c("MOT","IBM","CSCO"))
fir_list
fir_element<-fir_list[1]
fir_element
element_a<-fir_list[1]
element_a
element_a<-fir_list[[1]]
element_a
element_a<-fir_list[1]
element_a
class(element_a)
element_b<-fir_list[2]
element_b
class(element_b)
class(element_b)
element_b<-fir_list[[2]]
class(element_b)
element_b<-fir_list["b"] #[[]]를 쓰니까 해당요소의 데이터 속성이 출력됨 []하면
class(element_b)
#[]는 단일 대괄호 연산자로 리스트의 부분을 추출하는데 사용
#[[]]은 리스트의 요소를 반환하고 []은 리스트를 반환
part <- fir_list[c(1,3)]
part
#list객체
#list객체는 유형과 크기가 다른 객체를 저장할 수 있기 때문에 가장 일반젃인 저장소임
fir_list <- list(a=c(1,2,3,4,5),
b=matrix(1:10, nrow = 2, ncol = 5 ),
c=data.frame(price=c(57.4,79.4,11.8),
stock=c("MOT","IBM","CSCO")))
#[]는 단일 대괄호 연산자로 리스트의 부분을 추출하는데 사용
#[[]]은 리스트의 요소를 반환하고 []은 리스트를 반환
part <- fir_list[c(1,3)]
part #a,c만 출력
#[[]](이중 대괄호) 연산자를 쓰니까 해당요소의 데이터 속성이 출력됨
#[]하면 상위 데이터 구조의 속성이 출력됨
element_b<-fir_list[["b"]]
class(element_b)
#[[]](이중 대괄호) 연산자를 쓰니까 해당요소의 데이터 속성이 출력됨
#[]하면 상위 데이터 구조의 속성이 출력됨
element_b<-fir_list[["b"]]
class(part)
length_part <- length(part)
length_part
en
#new.env()
#인바이런먼트는 성능을 높히기 위해 R 내부적으로 많이 사용하는 구조임
#참조 의미론(reference smetic)을 가짐
#참조 의미론: 변수가 객체를 값으로 저장하지 않지만 메모리 사에 위치한 객체의 주소를 저장함 크기가 큰 객체가 사용될 때마다 복사의 필요가 없기에 효율적인 코드가 가능
#인바이런먼트는 주로 룩업성능의 해시지도를 실행하는데 사용함
en<-new.env()
en[["first"]]<- 5
en[["second"]]<- 6
en$third<-7
en
ls(env)
ls(env)
ls(en)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = 'http://irkernel.github.io/', type = 'source')
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = 'http://irkernel.github.io/', type = 'source')
install.packages(c('repr', 'IRdisplay', 'IRkernel'), type = 'source')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec(user=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
# getwd()
setwd('C:/Users/STUDENT/Desktop/비대면강의/경영과학2')
data <- read.csv('./경영과학 텀프로젝트.CSV', header=FALSE)
library(dplyr)
library(tidyverse)
library(caret)
library(cluster)
data_c <- kmeans(data, 3)
data <- read.csv('./경영과학 텀프로젝트.CSV', header=FALSE)
# getwd()
setwd('C:/Users/STUDENT/Desktop/비대면강의/경영과학2/OR2_DESIGNPROJECT')
# getwd()
setwd('C:/Users/STUDENT/Desktop/비대면강의/경영과학2/OR2_DESIGNPROJECT')
data <- read.csv('./경영과학 텀프로젝트.CSV', header=FALSE)
data_c <- kmeans(data, 3)
data_c$cluster
clusplot(data, data_c$cluster, color = TRUE, shade = TRUE,
labels = 3, lines = 0)
str(data)
library(fpc)
install.packages("fpc")
library(fpc)
# Density-based clustering
summary(data)
data_t <- t(data)
summary(data_t)
data_t <- as.integer(data_t)
summary(data_t)
summary(data_t)
data_t <- t(data)
summary(data_t)
View(data_t)
View(data_t)
View(data_t)
data <- read.csv('./경영과학 텀프로젝트.CSV', header=FALSE)
# cluster가 13, 3, 10로 묶임
data_c <- kmeans(data, 3)
data_c$cluster
clusplot(data, data_c$cluster, color = TRUE, shade = TRUE,
labels = 3, lines = 0)
# cluster가 13, 3, 10로 묶임
data_c <- kmeans(data, 3)
data_c$cluster
clusplot(data, data_c$cluster, color = TRUE, shade = TRUE,
labels = 3, lines = 0)
data_c
data_c$cluster
# cluster가 13, 3, 10로 묶임
data_c <- kmeans(data, 3)
data_c
# cluster가 7, 13, 10로 묶임
data_c <- kmeans(data, 3)
data_c
# Density-based clustering
summary(data) # attribute 별로 평균을 구해야 하는데
# Density-based clustering
mean(data) # attribute 별로 평균을 구하기 위
data <- read.csv('./경영과학 텀프로젝트.CSV', header=FALSE)
# Density-based clustering
mean(data) # attribute 별로 평균을 구하기 위
# Density-based clustering
summary(data) # attribute 별로 평균을 구하기 위
# Hierarchical clusering
data_hc <- hclust(d=dist(data), method = "average")
data_hc
plot(data_hc, hang=-1)
rect.hclust(data_hc, k=3)
# Hierarchical clusering
data_hc <- hclust(d=dist(data), method = "median")
data_hc
plot(data_hc, hang=-1)
rect.hclust(data_hc, k=3)
# Hierarchical clusering
data_hc <- hclust(d=dist(data), method = "average")
data_hc
plot(data_hc, hang=-1)
rect.hclust(data_hc, k=3)
data_t <- t(data)
summary(data_t)
s_dt <- summary(data_t)
data_d <- dbscan(data, eps=9.7, MinPts = 10)
table(data_d$cluster)
table(data_d$cluster)
data_d <- dbscan(data, eps=9, MinPts = 10)
table(data_d$cluster)
plot(data_d)
data_d <- dbscan(data, eps=9, MinPts = 10)
data_d <- dbscan(data, eps=9, MinPts = 100)
table(data_d$cluster)
data_d <- dbscan(data, eps=9, MinPts = 10)
table(data_d$cluster)
table(data_d$cluster, data$Species)
table(data_d$cluster)
